parameters:
  - name: README
    description: These parameters are useful to quickly change some metadata. However, there are still things you MUST change in the template, like resource limits and container specs (environment)!
    value: FIRST
  - name: NAME
    description: This is the component name which will be also visible in Openshift. Add a suffix like -api, -worker, -sync, -datafetch, ...
    value: verwerkingsregister
  - name: APP
    description: This is the application name of which the component is part of. For exemple the email-api is part of the notification application.
    value: verwerkingsregister
  - name: NAMESPACE
    description: This is the namespace where the component will be deployed. The namespace correspondents with the business domain where the component or application is part of. The environment suffixes dv, qa or pr are allready provided where needed in the template with the ENV variable.
    value: webcomponents
  - name: ENV
    description: This is the environment suffix, i.e. dv, qa or pr.
    value: dv
  - name: IMAGE_TAG
    description: This is the tag of the image that should be deployed. Our CICD will set this property automatically!
    value: "9"
  - name: APM_SERVICE_NAME
    description: The Elastic APM service name should be written in full and contain the environment.
    value: Verwerkingsregister DV
apiVersion: v1
kind: Template
metadata:
  name: ${NAME}
objects:
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      name: ${NAME}
      namespace: ${NAMESPACE}${ENV}
      labels:
        app: ${APP}
        component: ${NAME}
    spec:
      replicas: 1
      selector:
        app: ${APP}
        component: ${NAME}
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          name: ${NAME}
          namespace: ${NAMESPACE}${ENV}
          labels:
            app: ${APP}
            component: ${NAME}
        spec:
          containers:
            - env:
                - name: HOST
                  value: 0.0.0.0
                - name: DEPLOY_ENV
                  value: test
                - name: NODE_VERSION_URL
                  value: https://semver.io/node/resolve/9.x
                - name: "APP_NAMESPACE_PREFIX"
                  value: "${NAMESPACE}/${NAME}"
                - name: "APP_LOG_LEVEL"
                  value: "INFO"
                - name: APM_SECRET_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: apm-secrets
                      key: SECRETTOKEN
                - name: APM_SERVER_URL
                  valueFrom:
                    secretKeyRef:
                      name: apm-secrets
                      key: SERVERURL
                - name: APM_VERIFY_SERVER_CERT
                  valueFrom:
                    secretKeyRef:
                      name: apm-secrets
                      key: SERVERCERT
                - name: APM_CENTRAL_CONFIG
                  valueFrom:
                    secretKeyRef:
                      name: apm-secrets
                      key: CENTRALCONFIG
                - name: APM_SERVICE_NAME
                  value: ${APM_SERVICE_NAME}
                - name: APM_ENVIRONMENT
                  value: 'DV'
              image: docker-registry.default.svc:5000/d09build/${NAME}:${IMAGE_TAG}
              imagePullPolicy: Always
              livenessProbe:
                failureThreshold: 30
                httpGet:
                  path: /
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 20
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 3
              readinessProbe:
                failureThreshold: 30
                httpGet:
                  path: /
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 20
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 3
              name: ${NAME}
              ports:
                - containerPort: 8080
                  protocol: TCP
              resources:
                limits:
                  cpu: 500m
                  memory: 512Mi
                requests:
                  cpu: 10m
                  memory: 25Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
      triggers: []
  - apiVersion: v1
    kind: Service
    metadata:
      name: ${NAME}
      namespace: ${NAMESPACE}${ENV}
      labels:
        app: ${APP}
        component: ${NAME}
    spec:
      ports:
        - name: ${NAME}-8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        app: ${APP}
        component: ${NAME}
      sessionAffinity: None
      type: ClusterIP
